{"version":3,"file":"useAvatar.js","sourceRoot":"","sources":["../../../../Avatar/src/useAvatar.ts"],"names":[],"mappings":";AAAA,OAAO,EAAgC,QAAQ,EAAE,UAAU,EAAkC,SAAS,EAAE,MAAM,MAAM,CAAA;AACpH,OAAO,EAAa,WAAW,EAAE,MAAM,OAAO,CAAA;AAC9C,OAAO,qBAAqB,CAAA;AAC5B,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAA;AAmBnD,MAAM,UAAU,SAAS,CAAC,KAAkB;IAC1C,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAA;IAElC,MAAM,EACJ,EAAE,EACF,GAAG,EACH,GAAG,EACH,GAAG,EACH,MAAM,EACN,OAAO,EACP,QAAQ,EACR,KAAK,EACL,IAAI,GAAG,IAAI,EACX,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,MAAM,EAClC,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAE1B,KAAK,EADJ,UAAU,UACX,KAAK,EAbH,mGAaL,CAAQ,CAAA;IAET,MAAM,OAAO,GAAG,EAAE,IAAI,MAAM,CAAA;IAE5B,MAAM,WAAW,GAAG,QAAQ,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAA;IACtD,MAAM,KAAK,GAAG,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,KAAI,SAAS,CAAA;IACvC,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;IAG7B,MAAM,WAAW,GAAG,UAAU,CAAC;QAC7B,iBAAiB,EAAE,OAAO,CAAC,OAAO,CAAC;KACpC,EACD,WAAW,EACX,oBAAoB,MAAM,EAAE,EAC5B,kBAAkB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,KAAI,IAAI,EAAE,EACzC,kBAAkB,CACjB,CAAA;IAED,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,iBACrC,SAAS,EAAE,WAAW,EACtB,GAAG,EAAE,MAAM,EACX,cAAc,EAAE,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAC5D,eAAe,EAAE,QAAQ,IAAI,SAAS,IACnC,UAAU,EACb,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAGlB,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QACrC,GAAG;QACH,GAAG;QACH,SAAS,EAAE,kCAAkC;KAC9C,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;IAGV,MAAM,gBAAgB,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1C,SAAS,EAAE,qCAAqC;KACjD,CAAC,EAAE,EAAE,CAAC,CAAA;IAGP,MAAM,YAAY,GAAG,UAAU,CAAC;QAC9B,iBAAiB,EAAE,OAAO,CAAC,KAAK,CAAC;KAClC,EACD,kBAAkB,GAAG,KAAK,EAC1B,kBAAkB,CACjB,CAAA;IAED,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QACvC,SAAS,EAAE,YAAY;KACxB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAA;IAEZ,OAAO;QACL,OAAO;QACP,YAAY;QACZ,WAAW;QACX,gBAAgB;QAChB,aAAa;QACb,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC;QACvB,YAAY,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK;QAC1B,WAAW;QACX,GAAG;QACH,QAAQ;KACT,CAAA;AACH,CAAC","sourcesContent":["import { HTMLSimplexuiProps, ReactRef, useImage, classnames, type ImageProps, GenericStyles, useDOMRef } from 'core'\r\nimport { ReactNode, useCallback } from 'react'\r\nimport './styles/Avatar.css'\r\nimport { useAvatarContext } from './avatar_context'\r\n\r\nexport type AvatarRef = HTMLSpanElement | null\r\n\r\ninterface Props extends HTMLSimplexuiProps<'span'> {\r\n  ref?: ReactRef<AvatarRef>\r\n  alt?: string\r\n  fallback?: ReactNode\r\n  badge?: {\r\n    color?: GenericStyles.Color\r\n    value?: string\r\n  }\r\n  size?: GenericStyles.Size\r\n  radius?: GenericStyles.Radius\r\n  disabled?: boolean\r\n}\r\n\r\nexport type AvatarProps = Props & ImageProps\r\n\r\nexport function useAvatar(props: AvatarProps) {\r\n  const context = useAvatarContext()\r\n\r\n  const {\r\n    as,\r\n    ref,\r\n    src,\r\n    alt,\r\n    onLoad,\r\n    onError,\r\n    fallback,\r\n    badge,\r\n    size = 'md',\r\n    radius = context?.radius || 'full',\r\n    disabled = context?.disabled,\r\n    ...otherPorps\r\n  } = props\r\n\r\n  const Element = as || 'span'\r\n\r\n  const imageStatus = useImage({ src, onLoad, onError })\r\n  const color = badge?.color || 'primary'\r\n  const domRef = useDOMRef(ref)\r\n\r\n  /* Root */\r\n  const baseClasses = classnames({\r\n    'sx-avatar-group': Boolean(context),\r\n  },\r\n  'sx-avatar',\r\n  `sx-avatar-radius-${radius}`,\r\n  `sx-avatar-size-${context?.size || size}`,\r\n  'simplexui-themes',\r\n  )\r\n\r\n  const getBaseProps = useCallback(() => ({\r\n    className: baseClasses,\r\n    ref: domRef,\r\n    'data-loading': imageStatus === 'loading' ? true : undefined,\r\n    'data-disabled': disabled || undefined,\r\n    ...otherPorps,\r\n  }), [imageStatus])\r\n\r\n  /* Image */\r\n  const getImgProps = useCallback(() => ({\r\n    src,\r\n    alt,\r\n    className: 'sx-avatar-image simplexui-themes',\r\n  }), [src])\r\n\r\n  /* Fallback */\r\n  const getFallbackProps = useCallback(() => ({\r\n    className: 'sx-avatar-fallback simplexui-themes',\r\n  }), [])\r\n\r\n  /* Badge */\r\n  const badgeClasses = classnames({\r\n    'sx-avatar-badge': Boolean(badge),\r\n  },\r\n  'sx-avatar-badge-' + color,\r\n  'simplexui-themes',\r\n  )\r\n\r\n  const getBadgeProps = useCallback(() => ({\r\n    className: badgeClasses,\r\n  }), [badge])\r\n\r\n  return {\r\n    Element,\r\n    getBaseProps,\r\n    getImgProps,\r\n    getFallbackProps,\r\n    getBadgeProps,\r\n    isBadge: Boolean(badge),\r\n    badgeContent: badge?.value,\r\n    imageStatus,\r\n    src,\r\n    fallback,\r\n  }\r\n}\r\n"]}