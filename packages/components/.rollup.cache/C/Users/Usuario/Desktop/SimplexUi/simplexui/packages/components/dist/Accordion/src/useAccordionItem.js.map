{"version":3,"file":"useAccordionItem.js","sourceRoot":"","sources":["../../../Accordion/src/useAccordionItem.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,SAAS,EAA0C,MAAM,MAAM,CAAA;AACpF,OAAO,EACL,gBAAgB,IAAI,uBAAuB,GAE5C,MAAM,cAAc,CAAA;AAErB,OAAO,4BAA4B,CAAA;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AACnC,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AAYzD,MAAM,UAAU,gBAAgB,CAAC,KAAyB;IACxD,MAAM,OAAO,GAAG,mBAAmB,EAAE,CAAA;IACrC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,CAAA;IAE7C,MAAM,EACJ,EAAE,EACF,GAAG,EACH,KAAK,EACL,IAAI,GAAG,KAAK,EACZ,QAAQ,EACR,QAAQ,EACR,SAAS,KAEP,KAAK,EADJ,UAAU,UACX,KAAK,EATH,mEASL,CAAQ,CAAA;IAET,MAAM,OAAO,GAAG,EAAE,IAAI,KAAK,CAAA;IAC3B,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;IAE7B,MAAM,EACJ,SAAS,EACT,WAAW,EACX,YAAY,EACZ,UAAU,EACV,QAAQ,EACR,GAAG,GACJ,GAAG,uBAAuB,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAA;IAGxD,MAAM,WAAW,GAAG,UAAU,CAAC;QAC7B,IAAI,EAAE,IAAI;QACV,CAAC,mBAAmB,GAAG,OAAO,CAAC,EAAE,KAAK;QACtC,0BAA0B,EAAE,CAAC,KAAK;KACnC,EACD,kBAAkB,EAClB,kBAAkB,EAClB,SAAS,EACT,SAAS,CACR,CAAA;IAED,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,iBACrC,WAAW,EAAE,WAAW,EACxB,aAAa,EAAE,QAAQ,IAAI,SAAS,EACpC,eAAe,EAAE,UAAU,IAAI,SAAS,EACxC,EAAE,EAAE,GAAG,IACJ,SAAS,EACZ,EAAE;QACF,MAAM;QACN,QAAQ;QACR,UAAU;QACV,WAAW;KACZ,CAAC,CAAA;IAGF,MAAM,aAAa,GAAG,UAAU,CAAC,EAChC,EACD,kBAAkB,EAClB,yBAAyB,CACxB,CAAA;IAED,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,iCACpC,WAAW,KACd,SAAS,EAAE,aAAa,IACxB,EAAE;QACF,WAAW;QACX,aAAa;QACb,MAAM;KACP,CAAC,CAAA;IAEF,MAAM,cAAc,GAAG,UAAU,CAAC,EAAE,EAClC,kBAAkB,EAClB,0BAA0B,CAC3B,CAAA;IAED,MAAM,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,iCACrC,YAAY,KACf,SAAS,EAAE,cAAc,IACzB,EAAE;QACF,QAAQ;KACT,CAAC,CAAA;IAEF,OAAO;QACL,OAAO;QACP,KAAK;QACL,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,cAAc;QACd,eAAe;QACf,QAAQ;QACR,UAAU;KACX,CAAA;AACH,CAAC","sourcesContent":["import { classnames, useDOMRef, type HTMLSimplexuiProps, type ReactRef } from 'core'\r\nimport {\r\n  useAccordionItem as useSimplexAccordionItem,\r\n  type AccordionItemProps as SimplexAccordionItemProps,\r\n} from 'simplex_hook'\r\n\r\nimport './styles/AccordionItem.css'\r\nimport { useCallback } from 'react'\r\nimport { useAccordionContext } from './accordion_context'\r\n\r\nexport type AccordionItemRef = HTMLButtonElement | null\r\ninterface Props extends HTMLSimplexuiProps<'div', 'title'> {\r\n  ref?: ReactRef<HTMLButtonElement | null>\r\n  dark?: boolean\r\n  title: string\r\n  subtitle?: string\r\n}\r\n\r\nexport type AccordionItemProps = Props & SimplexAccordionItemProps\r\n\r\nexport function useAccordionItem(props: AccordionItemProps) {\r\n  const context = useAccordionContext()\r\n  const { variant, classItem, split } = context\r\n\r\n  const {\r\n    as,\r\n    ref,\r\n    title,\r\n    dark = false,\r\n    subtitle,\r\n    children,\r\n    className,\r\n    ...otherProps\r\n  } = props\r\n\r\n  const Element = as || 'div'\r\n  const domRef = useDOMRef(ref)\r\n\r\n  const {\r\n    baseProps,\r\n    buttonProps,\r\n    contentProps,\r\n    isDisabled,\r\n    isActive,\r\n    key,\r\n  } = useSimplexAccordionItem(otherProps, context, domRef)\r\n\r\n  /* Base */\r\n  const baseClasses = classnames({\r\n    dark: dark,\r\n    ['sx-accordionItem-' + variant]: split,\r\n    'sx-accordionItem-divider': !split,\r\n  },\r\n  'simplexui-themes',\r\n  'sx-accordionItem',\r\n  classItem,\r\n  className,\r\n  )\r\n\r\n  const getPropsBase = useCallback(() => ({\r\n    'className': baseClasses,\r\n    'data-active': isActive || undefined,\r\n    'data-disabled': isDisabled || undefined,\r\n    id: key,\r\n    ...baseProps,\r\n  }), [\r\n    domRef,\r\n    isActive,\r\n    isDisabled,\r\n    baseClasses,\r\n  ])\r\n\r\n  /* header */\r\n  const buttonClasses = classnames({\r\n  },\r\n  'simplexui-themes',\r\n  'sx-accordionItem-header',\r\n  )\r\n\r\n  const getButtonProps = useCallback(() => ({\r\n    ...buttonProps,\r\n    className: buttonClasses,\r\n  }), [\r\n    buttonProps,\r\n    buttonClasses,\r\n    domRef,\r\n  ])\r\n\r\n  const contentClasses = classnames({},\r\n    'simplexui-themes',\r\n    'sx-accordionItem-content',\r\n  )\r\n\r\n  const getContentProps = useCallback(() => ({\r\n    ...contentProps,\r\n    className: contentClasses,\r\n  }), [\r\n    isActive,\r\n  ])\r\n\r\n  return {\r\n    Element,\r\n    title,\r\n    subtitle,\r\n    children,\r\n    getPropsBase,\r\n    getButtonProps,\r\n    getContentProps,\r\n    isActive,\r\n    isDisabled,\r\n  }\r\n}\r\n"]}